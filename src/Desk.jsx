/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.3 desk.gltf 
*/

import * as THREE from 'three'
import React, { useState, useRef } from 'react'
import { useFrame } from '@react-three/fiber'
import { Html, useGLTF } from '@react-three/drei'
import Hero from './hero/Hero'
import '../index.css'

export function Desk({...props}) {
  const meshRef = useRef();
  const gltf = useGLTF('models/desk.gltf')
  gltf.scene.traverse( function( object ) {
    object.frustumCulled = false;
  } );
  const nodes = gltf.nodes
  const materials = gltf.materials
  const FOCUS_MESH = nodes['Mesh0_21']

  const [zooming, setZooming] = useState(false);

  const zoomToMesh = (state) => {
    const boundingBox = new THREE.Box3().setFromObject(FOCUS_MESH);
    console.log(boundingBox)
    const center = new THREE.Vector3();
    boundingBox.getCenter(center);

    const frontVector = new THREE.Vector3(1, 0, 0); 
    const worldFront = FOCUS_MESH.localToWorld(frontVector.clone().normalize());

    const offset = 3; 
    const cameraPosition = worldFront.clone().multiplyScalar(offset);

    state.camera.position.set(cameraPosition.x-2.65, cameraPosition.y+.6, cameraPosition.z-.5);
    state.camera.lookAt(center.x-1,center.y-1.05,center.z-1.1); 
  };

  const handleClick = (state) => {
    zoomToMesh(state, meshRef.current);
  };

  useFrame((state) => {
    if (zooming) {
      zoomToMesh(state, targetMesh);
      setZooming(false);
    }
  });

  return (
    <group {...props} dispose={null} ref={meshRef} onClick={handleClick}>
      <mesh geometry={nodes.Node7.geometry} material={materials['paper.001']} />
      <mesh geometry={nodes.Node8.geometry} material={materials['paper.001']} />
      <mesh geometry={nodes.Node9.geometry} material={materials['paper.001']} />
      <mesh geometry={nodes.Node12.geometry} material={materials['metal.001']} />
      <mesh geometry={nodes.Node18.geometry} material={materials['black.001']} >
          <Html className="content" rotation-y={Math.PI / 2} position={[-.12, .6, -.529]} scale={[0.047,.040,1]} transform occlude>
              <div className="wrapper" onPointerDown={(e) => e.stopPropagation()}>
                <Hero />
              </div>
          </Html>
      </mesh>
      <mesh geometry={nodes.Mesh0.geometry} material={materials['metal.001']} />
      <mesh geometry={nodes.Mesh0_1.geometry} material={materials['black.001']} />
      <mesh geometry={nodes.Mesh0_2.geometry} material={materials['paper.001']} />
      <mesh geometry={nodes.Mesh0_3.geometry} material={materials['cup.001']} />
      <mesh geometry={nodes.Mesh0_4.geometry} material={materials['paper.001']} />
      <mesh geometry={nodes.Mesh0_5.geometry} material={materials['folders3.001']} />
      <mesh geometry={nodes.Mesh0_6.geometry} material={materials['paper.001']} />
      <mesh geometry={nodes.Mesh0_7.geometry} material={materials['folders2.001']} />
      <mesh geometry={nodes.Mesh0_8.geometry} material={materials['paper.001']} />
      <mesh geometry={nodes.Mesh0_9.geometry} material={materials['folders1.001']} />
      <mesh geometry={nodes.Mesh0_10.geometry} material={materials['metal.001']} />
      <mesh geometry={nodes.Mesh0_11.geometry} material={materials['black.001']} />
      <mesh geometry={nodes.Mesh0_12.geometry} material={materials['wood.001']} />
      <mesh geometry={nodes.Mesh0_13.geometry} material={materials['pencil1.001']} />
      <mesh geometry={nodes.Mesh0_14.geometry} material={materials['pencil2.001']} />
      <mesh geometry={nodes.Mesh0_18.geometry} material={materials['wood.001']} />
      <mesh geometry={nodes.Mesh0_19.geometry} material={materials['pencil2.001']} />
      <mesh geometry={nodes.Mesh0_20.geometry} material={materials['coffee.001']} />
      <mesh geometry={nodes.Mesh0_21.geometry} material={materials['plant_green.001']} />
      <mesh geometry={nodes.Mesh0_22.geometry} material={materials['cup.001']} />
      <mesh geometry={nodes.Mesh0_23.geometry} material={materials['coffee.001']} />
      <mesh geometry={nodes.Mesh0_25.geometry} material={materials['black.001']} />
      <mesh geometry={nodes.Mesh0_26.geometry} material={materials['paper.001']} />
      <mesh geometry={nodes.Mesh0_27.geometry} material={materials['folders1.001']} />
      <mesh geometry={nodes.Mesh0_28.geometry} material={materials['paper.001']} />
      <mesh geometry={nodes.Mesh0_29.geometry} material={materials['folders3.001']} />
      <mesh geometry={nodes.Mesh0_30.geometry} material={materials['folders2.001']} />
      <mesh geometry={nodes.Mesh0_31.geometry} material={materials['black.001']} />
      <mesh geometry={nodes.Mesh0_32.geometry} material={materials['paper.001']} />
      <mesh geometry={nodes.Mesh0_33.geometry} material={materials['folders1.001']} />
      <mesh geometry={nodes.Mesh0_34.geometry} material={materials['metal.001']} /> { /*Laptop*/ }
      <mesh geometry={nodes.Mesh0_35.geometry} material={materials['black.001']} />
      <mesh geometry={nodes.Mesh0_36.geometry} material={materials['metal.001']} />
      <mesh geometry={nodes.Mesh0_37.geometry} material={materials['wood.001']} />
    </group>
  )
}

useGLTF.preload('models/desk.gltf')
